### YamlMime:ModuleUnit
uid: 
metadata:
  title: Summary
  description: Summary
  ms.date: 
  author: meaghanlewis
  ms.author: shanama
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
title: Summary
durationInMinutes: 1
content: |
  [!include[](includes/9-summary.md)]
quiz:
  title: Check your knowledge
  questions:
  - content: "Solidity smart contracts are run on what?"
    choices:
    - content: "Ethereum blockchain"
      isCorrect: false
      explanation: "This is the name of the platform Solidity targets, but not what test are run on."
    - content: "The Ethereum virtual machine"
      isCorrect: true
      explanation: "Correct! Solidity runs contracts on what's called the Ethereum virtual machine which is a sandboxed environment to self-contain all the transaction history for the contracts."
    - content: "A virtual machine"
      isCorrect: false
      explanation: "Partly correct. A virtual machine is an option to run tests in, but a specific kind of virtual machine is used for Solidity smart contracts"
    - content: "A sandbox environment"
      isCorrect: false
      explanation: "The Ethereum virtual machine is a sandboxed and isolated environment, but that is just a feature of the virtual machine, and not the main focus."
  - content: "Events in contracts describe actions that are taken in the contract. What is the correct syntax to define an event?"
    choices:
    - content: "event PurchasedItem;"
      isCorrect: false
      explanation: "Not quite. The event must be called like a function with a set of parenthesis at the end like `event PurchasedItem()` and include any arguments inside of the parenthesis."
    - content: "PurchasedItem(address buyer, uint price);"
      isCorrect: false
      explanation: "this would be the syntax to call a function that's previously been defined, not an event."
    - content: "emit PurchasedItem(address buyer, uint price);"  
      isCorrect: false
      explanation: "this is the syntax to call the event and create an entry in the transactions log."
    - content: "event PurchasedItem(address buyer, uint price);"
      isCorrect: true
      explanation: "Correct! to define an event you used the keyword `event` and then give the event a name and describe which arguments, if any, must be included inside parenthesis."
  - content: "What is an example of a user-defined type in Solidity?"
    choices:
    - content: "Structs"
      isCorrect: true
      explanation: "Structs are user-defined because you can define the collection of items within a struct."
    - content: "State variables"
      isCorrect: false
      explanation: "State variables use defined types like uint, int, bool, and addresses to hold values that are used in contracts."
    - content: "Addresses"
      isCorrect: false
      explanation: "Addresses are 20 byte value types that represent an Ethereum user account. A value is specified for a given address type."
    - content: "Arrays" 
      isCorrect: false
      explanation: "Arrays use defined types to store a collection of similar items of same type in a data structure."
  - content: "What is typically the first line of a smart contract source file?"
    choices:
    - content: "A pragma directive"
      isCorrect: true
      explanation: "Pragma is the keyword that you use to ask the compiler to check whether its version of Solidity matches the one required."
    - content: "A contract definition"
      isCorrect: false
      explanation: "The contract definition is required as part of the source file, but it is not the first line."
    - content: "A solidity version"
      isCorrect: false
      explanation: "A solidity version is part of the pragma directive, but does not include the keyword for the compiler to check."
    - content: "An event"
      isCorrect: false
      explanation: "Events are typically part of ever smart contract, but are not required, and exist inside the contract definition."    